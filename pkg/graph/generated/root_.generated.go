// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/AuroralTech/todo-bff/pkg/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	DeleteTodoByIdResponse struct {
		Success func(childComplexity int) int
	}

	Mutation struct {
		AddTodo          func(childComplexity int, input model.TodoItemInput) int
		DeleteTodoItem   func(childComplexity int, input *model.DeleteTodoByIDInput) int
		UpdateTodoStatus func(childComplexity int, input *model.UpdateTodoStatusInput) int
	}

	Query struct {
		TodoList func(childComplexity int) int
	}

	TodoItem struct {
		ID          func(childComplexity int) int
		IsCompleted func(childComplexity int) int
		Task        func(childComplexity int) int
	}

	TodoList struct {
		Items func(childComplexity int) int
	}

	UpdateTodoStatusResponse struct {
		Success func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "DeleteTodoByIdResponse.success":
		if e.complexity.DeleteTodoByIdResponse.Success == nil {
			break
		}

		return e.complexity.DeleteTodoByIdResponse.Success(childComplexity), true

	case "Mutation.addTodo":
		if e.complexity.Mutation.AddTodo == nil {
			break
		}

		args, err := ec.field_Mutation_addTodo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddTodo(childComplexity, args["input"].(model.TodoItemInput)), true

	case "Mutation.deleteTodoItem":
		if e.complexity.Mutation.DeleteTodoItem == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTodoItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTodoItem(childComplexity, args["input"].(*model.DeleteTodoByIDInput)), true

	case "Mutation.updateTodoStatus":
		if e.complexity.Mutation.UpdateTodoStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateTodoStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTodoStatus(childComplexity, args["input"].(*model.UpdateTodoStatusInput)), true

	case "Query.todoList":
		if e.complexity.Query.TodoList == nil {
			break
		}

		return e.complexity.Query.TodoList(childComplexity), true

	case "TodoItem.id":
		if e.complexity.TodoItem.ID == nil {
			break
		}

		return e.complexity.TodoItem.ID(childComplexity), true

	case "TodoItem.is_completed":
		if e.complexity.TodoItem.IsCompleted == nil {
			break
		}

		return e.complexity.TodoItem.IsCompleted(childComplexity), true

	case "TodoItem.task":
		if e.complexity.TodoItem.Task == nil {
			break
		}

		return e.complexity.TodoItem.Task(childComplexity), true

	case "TodoList.items":
		if e.complexity.TodoList.Items == nil {
			break
		}

		return e.complexity.TodoList.Items(childComplexity), true

	case "UpdateTodoStatusResponse.success":
		if e.complexity.UpdateTodoStatusResponse.Success == nil {
			break
		}

		return e.complexity.UpdateTodoStatusResponse.Success(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputDeleteTodoByIdInput,
		ec.unmarshalInputTodoItemInput,
		ec.unmarshalInputUpdateTodoStatusInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/schema.graphql", Input: `type Query

type Mutation
`, BuiltIn: false},
	{Name: "../schema/todo.graphql", Input: `type TodoItem {
  id: ID!
  task: String!
  is_completed: Boolean!
}

type TodoList {
  items: [TodoItem!]!
}

extend type Query {
  todoList: TodoList!
}

extend type Mutation {
  addTodo(input: TodoItemInput!): TodoItem!
  updateTodoStatus(input: UpdateTodoStatusInput): UpdateTodoStatusResponse!
  deleteTodoItem(input: DeleteTodoByIdInput): DeleteTodoByIdResponse!
}

input TodoItemInput {
  task: String!
  is_completed: Boolean!
}

input UpdateTodoStatusInput {
  id: String!
  is_completed: Boolean!
}

type UpdateTodoStatusResponse {
  success: Boolean!
}

input DeleteTodoByIdInput {
  id: String!
}

type DeleteTodoByIdResponse {
  success: Boolean!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
